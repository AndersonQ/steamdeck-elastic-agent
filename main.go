package main

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/exec"
	"time"

	"github.com/spf13/cobra"
)

const (
	addr = ":4242"

	installDir  = "/opt/andersonq/steamdeck-sensor"
	installPath = installDir + "/steamdeck-sensor"

	serviceName = "steamdeck-sensor.service"
	servicePath = "/etc/systemd/system/steamdeck-sensor.service"
)

func main() {
	var rootCmd = &cobra.Command{
		Use:   "steamdeck-sensor",
		Short: "An simple API for Steam Deck 'sensors' program",
		Long: fmt.Sprintf("An simple API for Steam Deck 'sensors' program.\n\nInstallation directory: %s\nService name: %s\nService path: %s\n\n"+
			"The HTTP server runs on %s:"+
			"\n  - \"/\" returns the output of 'sensors -j'"+
			"\n  - \"/gpu\" parses the output for the Steam Deck. In any other device it'll return a json with zero values",
			installDir, serviceName, servicePath, addr),
	}

	rootCmd.AddCommand(runCmd())
	rootCmd.AddCommand(installCmd())
	rootCmd.AddCommand(uninstallCmd())

	if err := rootCmd.Execute(); err != nil {
		log.Fatal(err)
	}
}

func runCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "run",
		Short: "Run the Steam Deck Sensor API server",
		Run: func(cmd *cobra.Command, args []string) {
			http.HandleFunc("/", sensorsHandler)
			http.HandleFunc("/gpu", gpuSensorsHandler)

			fmt.Println("Starting server at", addr)
			log.Fatal(http.ListenAndServe(addr, nil))
		},
	}
}

func installCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "install",
		Short: "Install the Steam Deck Sensor API and registers as a systemd service. It'll override any previous installation",
		Run: func(cmd *cobra.Command, args []string) {
			if os.Geteuid() != 0 {
				log.Fatalf("must be run as root")
			}

			// try to uninstall, ignore any error as we're not checking if it's
			// installed
			_ = uninstallCmd().Execute()
			err := installService()
			if err != nil {
				log.Fatalf("Failed to install service: %v", err)
			}
			fmt.Println("steamdeck-sensor installed successfully!")
		},
	}
}

func uninstallCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "uninstall",
		Short: "Uninstall the Steam Deck Sensor API",
		Run: func(cmd *cobra.Command, args []string) {
			if os.Geteuid() != 0 {
				log.Fatalf("must be run as root")
			}

			_, err := os.Stat(servicePath)
			if !errors.Is(err, os.ErrNotExist) {
				err = runSystemdCMD("stop")
				if err != nil {
					log.Printf("Failed to stop service (uninstall will proceed anyway): %v", err)
				}

				err = os.Remove(servicePath)
				if err != nil {
					log.Printf("Failed to remove service file (uninstall will proceed anyway): %v", err)
				}
			}

			_, err = os.Stat(installDir)
			if !errors.Is(err, os.ErrNotExist) {
				err = os.RemoveAll(installDir)
				if err != nil {
					log.Fatalf("Failed to remove files: %v", err)
				}
			}

			fmt.Println("steamdeck-sensor uninstalled successfully!")
		},
	}
}

func installService() error {
	binPath, err := os.Executable()
	if err != nil {
		return fmt.Errorf("failed to get this binary path: %w", err)
	}

	err = os.MkdirAll(installDir, 0755)
	if err != nil {
		return fmt.Errorf("failed to create installation directory: %w", err)
	}

	input, err := os.ReadFile(binPath)
	if err != nil {
		return fmt.Errorf("failed to read file: %w", err)
	}
	err = os.WriteFile(installPath, input, 0755)
	if err != nil {
		return fmt.Errorf("failed to copy to installation directory: %w", err)
	}

	// Create the systemd service file
	serviceContent := []byte(fmt.Sprintf(`[Unit]
Description=Steam Deck Sensor API
After=network.target

[Service]
Type=simple
ExecStart=%s run
Restart=always

[Install]
WantedBy=multi-user.target
`, installPath))
	err = os.WriteFile(servicePath, serviceContent, 0644)
	if err != nil {
		return fmt.Errorf("failed to write service file: %w", err)
	}

	err = runSystemdCMD("enable")
	if err != nil {
		return err
	}

	err = runSystemdCMD("start")
	if err != nil {
		return err
	}

	return nil
}

func runSystemdCMD(action string) error {
	cmd := exec.Command("systemctl", action, serviceName)
	out, err := cmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("failed to %s service: %w. Output: %s", action, err, string(out))
	}

	return nil
}

func sensorsHandler(w http.ResponseWriter, r *http.Request) {
	// Execute the sensors command
	cmd := exec.Command("sensors", "-j")
	var out bytes.Buffer
	cmd.Stdout = &out
	err := cmd.Run()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// Parse the JSON output using the provided structs
	var sensorsData AutoGenerated
	err = json.Unmarshal(out.Bytes(), &sensorsData)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// Send the JSON response
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(sensorsData)
}

func gpuSensorsHandler(w http.ResponseWriter, r *http.Request) {
	// Execute the sensors command
	cmd := exec.Command("sensors", "-j")
	var out bytes.Buffer
	cmd.Stdout = &out
	err := cmd.Run()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// Parse the JSON output using the provided structs
	var sensorsData AutoGenerated
	err = json.Unmarshal(out.Bytes(), &sensorsData)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// Extract the AmdgpuPci0400 data
	gpuData := sensorsData.AmdgpuPci0400

	// Create the response JSON
	response := map[string]interface{}{
		"@timestamp": time.Now().Format(time.RFC3339Nano),
		"name":       "amdgpu",
		"adapter":    "amdgpu-pci-0400",
		// unit: C
		"temp": gpuData.Edge.Temp1Input,

		// unit: W
		"slowPPT": Power{
			Average: gpuData.SlowPPT.Power1Average,
			Input:   gpuData.SlowPPT.Power1Input,
			Cap:     gpuData.SlowPPT.Power1Cap,
		},
		"fastPPT": Power{
			Average: gpuData.FastPPT.Power2Average,
			Cap:     gpuData.FastPPT.Power2Cap,
		},
	}

	// Send the JSON response
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

type Power struct {
	Average float64 `json:"average"`
	Input   float64 `json:"input"`
	Cap     float64 `json:"cap"`
}

type AutoGenerated struct {
	NvmePci0100           NvmePci0100           `json:"nvme-pci-0100"`
	BAT1Acpi0             BAT1Acpi0             `json:"BAT1-acpi-0"`
	AmdgpuPci0400         AmdgpuPci0400         `json:"amdgpu-pci-0400"`
	SteamdeckHwmonIsa0000 SteamdeckHwmonIsa0000 `json:"steamdeck_hwmon-isa-0000"`
	AcpitzAcpi0           AcpitzAcpi0           `json:"acpitz-acpi-0"`
}

type Composite struct {
	Temp1Input float64 `json:"temp1_input"`
	Temp1Max   float64 `json:"temp1_max"`
	Temp1Min   float64 `json:"temp1_min"`
	Temp1Crit  float64 `json:"temp1_crit"`
	Temp1Alarm float64 `json:"temp1_alarm"`
}

type Sensor1 struct {
	Temp2Input float64 `json:"temp2_input"`
	Temp2Max   float64 `json:"temp2_max"`
	Temp2Min   float64 `json:"temp2_min"`
}

type NvmePci0100 struct {
	Adapter   string    `json:"Adapter"`
	Composite Composite `json:"Composite"`
	Sensor1   Sensor1   `json:"Sensor 1"`
}

type In0 struct {
	In0Input float64 `json:"in0_input"`
}

type Curr1 struct {
	Curr1Input float64 `json:"curr1_input"`
}

type BAT1Acpi0 struct {
	Adapter string `json:"Adapter"`
	In0     In0    `json:"in0"`
	Curr1   Curr1  `json:"curr1"`
}

type Vddgfx struct {
	In0Input float64 `json:"in0_input"`
}

type Vddnb struct {
	In1Input float64 `json:"in1_input"`
}

type Edge struct {
	Temp1Input float64 `json:"temp1_input"`
}

type SlowPPT struct {
	Power1Average float64 `json:"power1_average"`
	Power1Input   float64 `json:"power1_input"`
	Power1Cap     float64 `json:"power1_cap"`
}

type FastPPT struct {
	Power2Average float64 `json:"power2_average"`
	Power2Cap     float64 `json:"power2_cap"`
}

type AmdgpuPci0400 struct {
	Adapter string  `json:"Adapter"`
	Vddgfx  Vddgfx  `json:"vddgfx"`
	Vddnb   Vddnb   `json:"vddnb"`
	Edge    Edge    `json:"edge"`
	SlowPPT SlowPPT `json:"slowPPT"`
	FastPPT FastPPT `json:"fastPPT"`
}

type PDContractVoltage struct {
	In0Input float64 `json:"in0_input"`
}

type SystemFan struct {
	Fan1Input float64 `json:"fan1_input"`
	Fan1Fault float64 `json:"fan1_fault"`
}

type BatteryTemp struct {
	Temp1Input float64 `json:"temp1_input"`
}

type PDContractCurrent struct {
	Curr1Input float64 `json:"curr1_input"`
}

type SteamdeckHwmonIsa0000 struct {
	Adapter           string            `json:"Adapter"`
	PDContractVoltage PDContractVoltage `json:"PD Contract Voltage"`
	SystemFan         SystemFan         `json:"System Fan"`
	BatteryTemp       BatteryTemp       `json:"Battery Temp"`
	PDContractCurrent PDContractCurrent `json:"PD Contract Current"`
}

type Temp1 struct {
	Temp1Input float64 `json:"temp1_input"`
	Temp1Crit  float64 `json:"temp1_crit"`
}

type AcpitzAcpi0 struct {
	Adapter string `json:"Adapter"`
	Temp1   Temp1  `json:"temp1"`
}
